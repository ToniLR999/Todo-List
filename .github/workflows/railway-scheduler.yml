name: Railway Scheduler

on:
  schedule:
    - cron: "*/15 * * * *"   # cada 15 min (cron en UTC)
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Modo de prueba (no modifica Railway)'
        required: false
        default: false
        type: boolean

jobs:
  scheduler:
    # Si tu rama principal no es main, cambia esta condici√≥n
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
      RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
      TIMEZONE: Europe/Madrid
      BUSINESS_START: "10:00"
      BUSINESS_END: "19:00"
    steps:
      - name: Alternar estado del servicio en Railway seg√∫n horario
        shell: bash
        run: |
          set -euo pipefail
          
          # Verificar secretos
          if [ -z "${RAILWAY_TOKEN:-}" ] || [ -z "${RAILWAY_SERVICE_ID:-}" ]; then
            echo "‚ùå Error: Faltan secretos RAILWAY_TOKEN o RAILWAY_SERVICE_ID"
            exit 1
          fi

          # Configurar timezone
          export TZ="$TIMEZONE"
          
          # Obtener informaci√≥n de tiempo actual
          current_day=$(date +%u)  # 1=Lunes, 7=Domingo
          current_hour=$(date +%H | sed 's/^0*//')  # Remover ceros iniciales
          current_minute=$(date +%M | sed 's/^0*//')  # Remover ceros iniciales
          
          # Manejar casos especiales (hora 00 -> 0)
          current_hour=${current_hour:-0}
          current_minute=${current_minute:-0}
          
          # Calcular minutos totales desde medianoche
          current_minutes=$((current_hour * 60 + current_minute))
          
          # Parsear horarios de negocio
          start_hour=$(echo "$BUSINESS_START" | cut -d: -f1 | sed 's/^0*//')
          start_minute=$(echo "$BUSINESS_START" | cut -d: -f2 | sed 's/^0*//')
          end_hour=$(echo "$BUSINESS_END" | cut -d: -f1 | sed 's/^0*//')
          end_minute=$(echo "$BUSINESS_END" | cut -d: -f2 | sed 's/^0*//')
          
          # Manejar casos especiales
          start_hour=${start_hour:-0}
          start_minute=${start_minute:-0}
          end_hour=${end_hour:-0}
          end_minute=${end_minute:-0}
          
          start_minutes=$((start_hour * 60 + start_minute))
          end_minutes=$((end_hour * 60 + end_minute))

          # Informaci√≥n de debug
          echo "üïê Hora actual: $(date '+%Y-%m-%d %H:%M %Z')"
          echo "üìÖ D√≠a de la semana: $current_day (1=Lunes, 7=Domingo)"
          echo "‚è∞ Minutos actuales: $current_minutes"
          echo "üìù Horario de negocio: $start_minutes - $end_minutes minutos"

          # Determinar si debe estar activo
          if [ "$current_day" -ge 1 ] && [ "$current_day" -le 5 ] && \
             [ "$current_minutes" -ge "$start_minutes" ] && [ "$current_minutes" -le "$end_minutes" ]; then
            pause=false
            echo "‚úÖ Dentro de horario (${BUSINESS_START}-${BUSINESS_END}, L-V). Reanudando servicio."
          else
            pause=true
            echo "üö´ Fuera de horario. Poniendo servicio en pausa."
          fi

          # DEBUG: Mostrar informaci√≥n de secretos (sin revelar valores completos)
          echo "üîç Debug: Verificando configuraci√≥n..."
          echo "üîç Debug: RAILWAY_TOKEN configurado: $([ -n "${RAILWAY_TOKEN:-}" ] && echo "S√ç" || echo "NO")"
          echo "üîç Debug: RAILWAY_SERVICE_ID configurado: $([ -n "${RAILWAY_SERVICE_ID:-}" ] && echo "S√ç" || echo "NO")"
          echo "üîç Debug: RAILWAY_PROJECT_ID configurado: $([ -n "${RAILWAY_PROJECT_ID:-}" ] && echo "S√ç" || echo "NO")"
          
          # Verificar PROJECT_ID
          if [ -z "${RAILWAY_PROJECT_ID:-}" ]; then
            echo "‚ö†Ô∏è Falta RAILWAY_PROJECT_ID. Intenta sin projectId (puede fallar)."
          fi

          echo "üîç Debug: Preparando request para API REST de Railway..."
          
          # Preparar datos para API REST de Railway
          echo "üîç Debug: pause = $pause"
          echo "üîç Debug: Usando API REST de Railway"
          echo "üîç Debug: RAILWAY_SERVICE_ID = $RAILWAY_SERVICE_ID"
          echo "üîç Debug: URL completa = https://backboard.railway.app/v2/services/$RAILWAY_SERVICE_ID"
          echo "üîç Debug: Token (primeros 10 chars) = ${RAILWAY_TOKEN:0:10}..."
          
          # LOGGING EXHAUSTIVO - NO ME RINDO
          echo "üö® DEBUG EXHAUSTIVO:"
          echo "üö® Longitud del SERVICE_ID: ${#RAILWAY_SERVICE_ID}"
          echo "üö® Longitud del PROJECT_ID: ${#RAILWAY_PROJECT_ID}"
          echo "üö® Longitud del TOKEN: ${#RAILWAY_TOKEN}"
          echo "üö® SERVICE_ID empieza con: ${RAILWAY_SERVICE_ID:0:8}..."
          echo "üö® PROJECT_ID empieza con: ${RAILWAY_PROJECT_ID:0:8}..."
          echo "üö® TOKEN empieza con: ${RAILWAY_TOKEN:0:8}..."
          
          # Verificar formato UUID
          echo "üö® Verificando formato UUID:"
          if [[ $RAILWAY_SERVICE_ID =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]]; then
            echo "‚úÖ SERVICE_ID tiene formato UUID v√°lido"
          else
            echo "‚ùå SERVICE_ID NO tiene formato UUID v√°lido"
            echo "üö® Valor actual: '$RAILWAY_SERVICE_ID'"
          fi
          
          if [[ $RAILWAY_PROJECT_ID =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]]; then
            echo "‚úÖ PROJECT_ID tiene formato UUID v√°lido"
          else
            echo "‚ùå PROJECT_ID NO tiene formato UUID v√°lido"
            echo "üö® Valor actual: '$RAILWAY_PROJECT_ID'"
          fi

          # Verificar si es modo de prueba
          if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
            echo "üß™ MODO DE PRUEBA - No se enviar√° request a Railway"
            echo "üì° Request que se enviar√≠a:"
            echo "URL: https://backboard.railway.app/v2/services/$RAILWAY_SERVICE_ID"
            echo "Headers: Authorization: Bearer [TOKEN], Content-Type: application/json"
            echo "Data: pause = $pause"
            echo "üîç Debug Test: RAILWAY_SERVICE_ID = $RAILWAY_SERVICE_ID"
            echo "üîç Debug Test: Token (primeros 10 chars) = ${RAILWAY_TOKEN:0:10}..."
            echo "‚úÖ Prueba completada exitosamente"
            exit 0
          fi

          echo "üì° Enviando request a Railway API REST..."
          
          # Usar API REST de Railway (m√°s estable que GraphQL)
          resp=$(curl -sS -L -w "HTTP_CODE:%{http_code}" -X PATCH "https://backboard.railway.app/v2/services/$RAILWAY_SERVICE_ID" \
            -H "Authorization: Bearer $RAILWAY_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"pause\":$pause}")

          # Separar respuesta y c√≥digo HTTP
          http_code=$(echo "$resp" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
          response_body=$(echo "$resp" | sed 's/HTTP_CODE:[0-9]*$//')

          echo "üìã Respuesta HTTP: $http_code"
          echo "üìÑ Respuesta: $response_body"
          
          # LOGGING EXHAUSTIVO DE LA RESPUESTA
          echo "üö® DEBUG EXHAUSTIVO DE RESPUESTA:"
          echo "üö® Longitud de respuesta: ${#response_body}"
          echo "üö® Primeros 200 chars de respuesta: ${response_body:0:200}"
          echo "üö® C√≥digo HTTP num√©rico: $http_code"
          
          # Intentar diferentes APIs si falla
          if [ "$http_code" = "404" ]; then
            echo "üö® 404 DETECTADO - PROBANDO ALTERNATIVAS:"
            echo "üö® Probando API v1..."
            resp_v1=$(curl -sS -L -w "HTTP_CODE:%{http_code}" -X PATCH "https://backboard.railway.app/v1/services/$RAILWAY_SERVICE_ID" \
              -H "Authorization: Bearer $RAILWAY_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"pause\":$pause}")
            
            http_code_v1=$(echo "$resp_v1" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
            echo "üö® API v1 HTTP Code: $http_code_v1"
            
            echo "üö® Probando API de proyectos..."
            resp_proj=$(curl -sS -L -w "HTTP_CODE:%{http_code}" -X PATCH "https://backboard.railway.app/v2/projects/$RAILWAY_PROJECT_ID" \
              -H "Authorization: Bearer $RAILWAY_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"pause\":$pause}")
            
            http_code_proj=$(echo "$resp_proj" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
            echo "üö® API Proyectos HTTP Code: $http_code_proj"
          fi
          
          # Verificar c√≥digo HTTP
          if [ "$http_code" != "200" ]; then
            echo "‚ùå Error HTTP: $http_code"
            exit 1
          fi
          
          # Verificar errores en GraphQL
          if echo "$response_body" | grep -q '"errors"'; then
            echo "‚ùå Error en Railway GraphQL:"
            echo "$response_body"
            echo "üîé Sugerencias:"
            echo " - Verifica que el secreto RAILWAY_TOKEN sea un token de proyecto con permisos."
            echo " - A√±ade el secreto RAILWAY_PROJECT_ID si no est√° definido."
            echo " - Comprueba que RAILWAY_SERVICE_ID pertenece al proyecto indicado."
            exit 1
          fi
          
          echo "‚úÖ Operaci√≥n completada exitosamente"
