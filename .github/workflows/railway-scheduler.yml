name: Railway Scheduler

on:
  schedule:
    - cron: "*/15 * * * *"   # cada 15 min (cron en UTC)
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Modo de prueba (no modifica Railway)'
        required: false
        default: false
        type: boolean

jobs:
  scheduler:
    # Si tu rama principal no es main, cambia esta condición
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
      RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
      TIMEZONE: Europe/Madrid
      BUSINESS_START: "10:00"
      BUSINESS_END: "19:00"
    steps:
      - name: Alternar estado del servicio en Railway según horario
        shell: bash
        run: |
          set -euo pipefail
          
          # Verificar secretos
          if [ -z "${RAILWAY_TOKEN:-}" ] || [ -z "${RAILWAY_SERVICE_ID:-}" ]; then
            echo "❌ Error: Faltan secretos RAILWAY_TOKEN o RAILWAY_SERVICE_ID"
            exit 1
          fi

          # Configurar timezone
          export TZ="$TIMEZONE"
          
          # Obtener información de tiempo actual
          current_day=$(date +%u)  # 1=Lunes, 7=Domingo
          current_hour=$(date +%H | sed 's/^0*//')  # Remover ceros iniciales
          current_minute=$(date +%M | sed 's/^0*//')  # Remover ceros iniciales
          
          # Manejar casos especiales (hora 00 -> 0)
          current_hour=${current_hour:-0}
          current_minute=${current_minute:-0}
          
          # Calcular minutos totales desde medianoche
          current_minutes=$((current_hour * 60 + current_minute))
          
          # Parsear horarios de negocio
          start_hour=$(echo "$BUSINESS_START" | cut -d: -f1 | sed 's/^0*//')
          start_minute=$(echo "$BUSINESS_START" | cut -d: -f2 | sed 's/^0*//')
          end_hour=$(echo "$BUSINESS_END" | cut -d: -f1 | sed 's/^0*//')
          end_minute=$(echo "$BUSINESS_END" | cut -d: -f2 | sed 's/^0*//')
          
          # Manejar casos especiales
          start_hour=${start_hour:-0}
          start_minute=${start_minute:-0}
          end_hour=${end_hour:-0}
          end_minute=${end_minute:-0}
          
          start_minutes=$((start_hour * 60 + start_minute))
          end_minutes=$((end_hour * 60 + end_minute))

          # Información de debug
          echo "🕐 Hora actual: $(date '+%Y-%m-%d %H:%M %Z')"
          echo "📅 Día de la semana: $current_day (1=Lunes, 7=Domingo)"
          echo "⏰ Minutos actuales: $current_minutes"
          echo "📝 Horario de negocio: $start_minutes - $end_minutes minutos"

          # Determinar si debe estar activo
          if [ "$current_day" -ge 1 ] && [ "$current_day" -le 5 ] && \
             [ "$current_minutes" -ge "$start_minutes" ] && [ "$current_minutes" -le "$end_minutes" ]; then
            pause=false
            echo "✅ Dentro de horario (${BUSINESS_START}-${BUSINESS_END}, L-V). Reanudando servicio."
          else
            pause=true
            echo "🚫 Fuera de horario. Poniendo servicio en pausa."
          fi

          # DEBUG: Mostrar información de secretos (sin revelar valores completos)
          echo "🔍 Debug: Verificando configuración..."
          echo "🔍 Debug: RAILWAY_TOKEN configurado: $([ -n "${RAILWAY_TOKEN:-}" ] && echo "SÍ" || echo "NO")"
          echo "🔍 Debug: RAILWAY_SERVICE_ID configurado: $([ -n "${RAILWAY_SERVICE_ID:-}" ] && echo "SÍ" || echo "NO")"
          echo "🔍 Debug: RAILWAY_PROJECT_ID configurado: $([ -n "${RAILWAY_PROJECT_ID:-}" ] && echo "SÍ" || echo "NO")"
          
          # Verificar PROJECT_ID
          if [ -z "${RAILWAY_PROJECT_ID:-}" ]; then
            echo "⚠️ Falta RAILWAY_PROJECT_ID. Intenta sin projectId (puede fallar)."
          fi

          echo "🔍 Debug: Preparando Railway CLI..."
          
          # Preparar datos para Railway CLI
          echo "🔍 Debug: pause = $pause"
          echo "🔍 Debug: Usando Railway CLI (más confiable)"
          echo "🔍 Debug: RAILWAY_SERVICE_ID = $RAILWAY_SERVICE_ID"
          echo "🔍 Debug: RAILWAY_PROJECT_ID = $RAILWAY_PROJECT_ID"
          echo "🔍 Debug: Token (primeros 10 chars) = ${RAILWAY_TOKEN:0:10}..."
          
          # Verificar formato UUID
          echo "🔍 Verificando formato UUID:"
          if [[ $RAILWAY_SERVICE_ID =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]]; then
            echo "✅ SERVICE_ID tiene formato UUID válido"
          else
            echo "❌ SERVICE_ID NO tiene formato UUID válido"
            echo "🔍 Valor actual: '$RAILWAY_SERVICE_ID'"
          fi
          
          if [[ $RAILWAY_PROJECT_ID =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]]; then
            echo "✅ PROJECT_ID tiene formato UUID válido"
          else
            echo "❌ PROJECT_ID NO tiene formato UUID válido"
            echo "🔍 Valor actual: '$RAILWAY_PROJECT_ID'"
          fi

          # Verificar si es modo de prueba
          if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
            echo "🧪 MODO DE PRUEBA - No se enviará request a Railway"
            echo "📡 Query GraphQL que se ejecutaría:"
            echo "mutation(\$serviceId: ID!, \$pause: Boolean!) { serviceUpdate(id: \$serviceId, pause: \$pause) { id } }"
            echo "🔍 Variables que se enviarían:"
            echo "serviceId: $RAILWAY_SERVICE_ID"
            echo "pause: $pause"
            echo "🔍 Payload JSON completo:"
            test_payload=$(printf '{"query":"mutation($serviceId: ID!, $pause: Boolean!) { serviceUpdate(id: $serviceId, pause: $pause) { id } }","variables":{"serviceId":"%s","pause":%s}}' "$RAILWAY_SERVICE_ID" "$pause")
            echo "$test_payload"
            echo "🔍 Debug Test: RAILWAY_SERVICE_ID = $RAILWAY_SERVICE_ID"
            echo "🔍 Debug Test: RAILWAY_PROJECT_ID = $RAILWAY_PROJECT_ID"
            echo "🔍 Debug Test: Token (primeros 10 chars) = ${RAILWAY_TOKEN:0:10}..."
            echo "✅ Prueba completada exitosamente"
            exit 0
          fi

          echo "📡 Enviando request a Railway API REST..."
          
          # Usar API GraphQL directa (más confiable que CLI)
          echo "🚀 Usando API GraphQL directa de Railway..."
          
          # Debug: Ver qué valor real tiene la variable
          echo "🔍 Debug: Valor real de SERVICE_ID (sin enmascarar):"
          echo "🔍 Longitud = ${#RAILWAY_SERVICE_ID}"
          echo "🔍 Primeros 8 chars = '${RAILWAY_SERVICE_ID:0:8}'"
          
          # Verificar que no esté vacía
          if [ -z "$RAILWAY_SERVICE_ID" ]; then
            echo "❌ ERROR: SERVICE_ID está vacío"
            exit 1
          fi
          
          # Validar que SERVICE_ID no contenga caracteres problemáticos
          if [[ "$RAILWAY_SERVICE_ID" =~ [\"\\] ]]; then
            echo "❌ ERROR: SERVICE_ID contiene caracteres problemáticos (comillas o backslashes)"
            echo "🔍 SERVICE_ID actual: '$RAILWAY_SERVICE_ID'"
            exit 1
          fi
          
          echo "✅ SERVICE_ID configurado correctamente (longitud: ${#RAILWAY_SERVICE_ID})"
          
          echo "🚀 Ejecutando mutación GraphQL..."
          if [ "$pause" = true ]; then
            echo "⏸️ Pausando servicio..."
            # Mutación para pausar servicio - usar variables GraphQL separadas
            query='mutation($serviceId: ID!, $pause: Boolean!) { serviceUpdate(id: $serviceId, pause: $pause) { id } }'
          else
            echo "▶️ Reanudando servicio..."
            # Mutación para reanudar servicio - usar variables GraphQL separadas
            query='mutation($serviceId: ID!, $pause: Boolean!) { serviceUpdate(id: $serviceId, pause: $pause) { id } }'
          fi
          
          echo "🔍 Query GraphQL: $query"
          
          # Crear JSON payload usando printf para evitar problemas de escape
          payload=$(printf '{"query":"%s","variables":{"serviceId":"%s","pause":%s}}' "$query" "$RAILWAY_SERVICE_ID" "$pause")
          echo "🔍 Payload JSON: $payload"
          
          # Validar que el JSON se construyó correctamente
          if ! echo "$payload" | grep -q '^{.*}$'; then
            echo "❌ ERROR: El payload JSON no se construyó correctamente"
            echo "🔍 Payload actual: '$payload'"
            exit 1
          fi
          
          # Llamada a la API GraphQL de Railway con variables separadas
          resp=$(curl -sS -w "HTTP_CODE:%{http_code}" -X POST "https://backboard.railway.app/graphql/v2" \
            -H "Authorization: Bearer $RAILWAY_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$payload")
          
          echo "🔍 Respuesta completa: $resp"

          # Separar respuesta y código HTTP
          http_code=$(echo "$resp" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
          response_body=$(echo "$resp" | sed 's/HTTP_CODE:[0-9]*$//')

          echo "📋 Respuesta HTTP: $http_code"
          echo "📄 Respuesta: $response_body"
          
          # LOGGING EXHAUSTIVO DE LA RESPUESTA
          echo "🚨 DEBUG EXHAUSTIVO DE RESPUESTA:"
          echo "🚨 Longitud de respuesta: ${#response_body}"
          echo "🚨 Primeros 200 chars de respuesta: ${response_body:0:200}"
          echo "🚨 Código HTTP numérico: $http_code"
          
          # Intentar diferentes APIs si falla
          if [ "$http_code" = "404" ]; then
            echo "🚨 404 DETECTADO - PROBANDO ALTERNATIVAS:"
            echo "🚨 Probando API v1..."
            resp_v1=$(curl -sS -L -w "HTTP_CODE:%{http_code}" -X PATCH "https://backboard.railway.app/v1/services/$RAILWAY_SERVICE_ID" \
              -H "Authorization: Bearer $RAILWAY_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"pause\":$pause}")
            
            http_code_v1=$(echo "$resp_v1" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
            echo "🚨 API v1 HTTP Code: $http_code_v1"
            
            echo "🚨 Probando API de proyectos..."
            resp_proj=$(curl -sS -L -w "HTTP_CODE:%{http_code}" -X PATCH "https://backboard.railway.app/v2/projects/$RAILWAY_PROJECT_ID" \
              -H "Authorization: Bearer $RAILWAY_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"pause\":$pause}")
            
            http_code_proj=$(echo "$resp_proj" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
            echo "🚨 API Proyectos HTTP Code: $http_code_proj"
          fi
          
          # Verificar código HTTP
          if [ "$http_code" != "200" ]; then
            echo "❌ Error HTTP: $http_code"
            exit 1
          fi
          
          # Verificar errores en GraphQL
          if echo "$response_body" | grep -q '"errors"'; then
            echo "❌ Error en Railway GraphQL:"
            echo "$response_body"
            echo "🔎 Sugerencias:"
            echo " - Verifica que el secreto RAILWAY_TOKEN sea un token de proyecto con permisos."
            echo " - Añade el secreto RAILWAY_PROJECT_ID si no está definido."
            echo " - Comprueba que RAILWAY_SERVICE_ID pertenece al proyecto indicado."
            exit 1
          fi
          
          echo "✅ Operación completada exitosamente"
